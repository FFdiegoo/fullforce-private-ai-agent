generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documents    Document[]
  chatSessions ChatSession[]
  authEvents   AuthEvent[]

  @@map("users")
}

model Document {
  id              String          @id @default(cuid())
  filename        String
  originalName    String
  fileSize        Int
  mimeType        String
  uploadPath      String
  status          DocumentStatus  @default(PENDING)
  processedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // RAG Pipeline Required Fields
  safe_filename    String          @unique
  file_size        Int
  content_type     String
  upload_date      DateTime        @default(now())
  processed_date   DateTime?
  embedding_status EmbeddingStatus @default(PENDING)
  chunk_count      Int?
  content          String?         @db.Text
  summary          String?         @db.Text
  metadata         Json?

  // Metadata
  department   String?
  category     String?
  subject      String?
  description  String?

  // Relations
  uploadedBy   String
  user         User            @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  chunks       DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id          String    @id @default(cuid())
  document_id String
  chunk_index Int
  content     String    @db.Text
  embedding   String?   @db.Text
  metadata    Json?
  created_at  DateTime  @default(now())
  
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@unique([document_id, chunk_index])
  @@map("document_chunks")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  messages  Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model AuthEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_events")
}

enum Role {
  USER
  ADMIN
}

enum DocumentStatus {
  PENDING
  PROCESSED
  FAILED
}

enum EmbeddingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}