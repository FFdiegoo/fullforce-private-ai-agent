generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documents    Document[]
  chatSessions ChatSession[]
  authEvents   AuthEvent[]

  @@map("users")
}

model Document {
  id           String          @id @default(cuid())
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  uploadPath   String
  status       DocumentStatus  @default(PENDING)
  processedAt  DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Metadata
  department   String?
  category     String?
  subject      String?
  description  String?

  // Relations
  uploadedBy   String
  user         User            @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  chunks       DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id         String    @id @default(cuid())
  content    String
  embedding  Json?     // Was: String?, nu: Json? → geschikt voor vectorformaten
  chunkIndex Int
  createdAt  DateTime  @default(now())
  documentId String
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  messages  Json     // Was: String, nu: Json → betere AI-compatibiliteit
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model AuthEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_events")
}

enum Role {
  USER
  ADMIN
}

enum DocumentStatus {
  PENDING
  PROCESSED
  FAILED
}
